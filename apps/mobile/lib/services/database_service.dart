import 'package:hive_flutter/hive_flutter.dart';
import '../models/media_file.dart';

class DatabaseService {
  static final DatabaseService _instance = DatabaseService._internal();
  factory DatabaseService() => _instance;
  DatabaseService._internal();
  
  static const String mediaBoxName = 'media_files';
  static const String playlistBoxName = 'playlists';
  static const String historyBoxName = 'watch_history';
  static const String settingsBoxName = 'settings';
  
  late Box<MediaFile> _mediaBox;
  late Box<Playlist> _playlistBox;
  late Box<WatchHistory> _historyBox;
  late Box _settingsBox;
  
  Future<void> initialize() async {
    await Hive.initFlutter();
    
    // Register adapters (these will be generated by build_runner)
    // Hive.registerAdapter(MediaFileAdapter());
    // Hive.registerAdapter(MediaTypeAdapter());
    // Hive.registerAdapter(PlaylistAdapter());
    // Hive.registerAdapter(WatchHistoryAdapter());
    
    // Open boxes
    _mediaBox = await Hive.openBox<MediaFile>(mediaBoxName);
    _playlistBox = await Hive.openBox<Playlist>(playlistBoxName);
    _historyBox = await Hive.openBox<WatchHistory>(historyBoxName);
    _settingsBox = await Hive.openBox(settingsBoxName);
  }
  
  // Media File Operations
  Future<void> addMediaFile(MediaFile file) async {
    await _mediaBox.put(file.id, file);
  }
  
  Future<void> addMediaFiles(List<MediaFile> files) async {
    final Map<String, MediaFile> mediaMap = {
      for (var file in files) file.id: file
    };
    await _mediaBox.putAll(mediaMap);
  }
  
  Future<void> updateMediaFile(MediaFile file) async {
    await _mediaBox.put(file.id, file);
  }
  
  Future<void> deleteMediaFile(String id) async {
    await _mediaBox.delete(id);
  }
  
  MediaFile? getMediaFile(String id) {
    return _mediaBox.get(id);
  }
  
  List<MediaFile> getAllMediaFiles() {
    return _mediaBox.values.toList();
  }
  
  List<MediaFile> getVideoFiles() {
    return _mediaBox.values
        .where((file) => file.type == MediaType.video)
        .toList();
  }
  
  List<MediaFile> getAudioFiles() {
    return _mediaBox.values
        .where((file) => file.type == MediaType.audio)
        .toList();
  }
  
  List<MediaFile> getRecentlyPlayed({int limit = 20}) {
    final files = _mediaBox.values
        .where((file) => file.lastPlayed != null)
        .toList();
    
    files.sort((a, b) => b.lastPlayed!.compareTo(a.lastPlayed!));
    
    return files.take(limit).toList();
  }
  
  List<MediaFile> getFavorites() {
    return _mediaBox.values
        .where((file) => file.isFavorite)
        .toList();
  }
  
  List<MediaFile> searchMedia(String query) {
    final lowercaseQuery = query.toLowerCase();
    return _mediaBox.values
        .where((file) => 
            file.name.toLowerCase().contains(lowercaseQuery) ||
            (file.folderPath?.toLowerCase().contains(lowercaseQuery) ?? false))
        .toList();
  }
  
  Future<void> updatePlaybackPosition(String mediaId, Duration position) async {
    final file = _mediaBox.get(mediaId);
    if (file != null) {
      file.lastPosition = position;
      file.lastPlayed = DateTime.now();
      file.playCount++;
      await _mediaBox.put(mediaId, file);
    }
  }
  
  Future<void> toggleFavorite(String mediaId) async {
    final file = _mediaBox.get(mediaId);
    if (file != null) {
      file.isFavorite = !file.isFavorite;
      await _mediaBox.put(mediaId, file);
    }
  }
  
  // Playlist Operations
  Future<void> createPlaylist(Playlist playlist) async {
    await _playlistBox.put(playlist.id, playlist);
  }
  
  Future<void> updatePlaylist(Playlist playlist) async {
    playlist.modifiedAt = DateTime.now();
    await _playlistBox.put(playlist.id, playlist);
  }
  
  Future<void> deletePlaylist(String id) async {
    await _playlistBox.delete(id);
  }
  
  Playlist? getPlaylist(String id) {
    return _playlistBox.get(id);
  }
  
  List<Playlist> getAllPlaylists() {
    return _playlistBox.values.toList();
  }
  
  Future<void> addToPlaylist(String playlistId, String mediaId) async {
    final playlist = _playlistBox.get(playlistId);
    if (playlist != null && !playlist.mediaIds.contains(mediaId)) {
      playlist.mediaIds.add(mediaId);
      playlist.modifiedAt = DateTime.now();
      await _playlistBox.put(playlistId, playlist);
    }
  }
  
  Future<void> removeFromPlaylist(String playlistId, String mediaId) async {
    final playlist = _playlistBox.get(playlistId);
    if (playlist != null) {
      playlist.mediaIds.remove(mediaId);
      playlist.modifiedAt = DateTime.now();
      await _playlistBox.put(playlistId, playlist);
    }
  }
  
  List<MediaFile> getPlaylistMedia(String playlistId) {
    final playlist = _playlistBox.get(playlistId);
    if (playlist == null) return [];
    
    return playlist.mediaIds
        .map((id) => _mediaBox.get(id))
        .where((file) => file != null)
        .cast<MediaFile>()
        .toList();
  }
  
  // Watch History Operations
  Future<void> addToHistory(WatchHistory history) async {
    await _historyBox.add(history);
    
    // Keep only last 100 items
    if (_historyBox.length > 100) {
      final keysToDelete = _historyBox.keys.take(_historyBox.length - 100);
      await _historyBox.deleteAll(keysToDelete);
    }
  }
  
  List<WatchHistory> getWatchHistory({int limit = 50}) {
    final history = _historyBox.values.toList();
    history.sort((a, b) => b.watchedAt.compareTo(a.watchedAt));
    return history.take(limit).toList();
  }
  
  Future<void> clearWatchHistory() async {
    await _historyBox.clear();
  }
  
  // Settings Operations
  Future<void> setSetting(String key, dynamic value) async {
    await _settingsBox.put(key, value);
  }
  
  T? getSetting<T>(String key, {T? defaultValue}) {
    return _settingsBox.get(key, defaultValue: defaultValue) as T?;
  }
  
  Future<void> clearAllData() async {
    await _mediaBox.clear();
    await _playlistBox.clear();
    await _historyBox.clear();
    await _settingsBox.clear();
  }
  
  Future<void> close() async {
    await _mediaBox.close();
    await _playlistBox.close();
    await _historyBox.close();
    await _settingsBox.close();
  }
  
  // Statistics
  Map<String, dynamic> getStatistics() {
    final totalVideos = getVideoFiles().length;
    final totalAudio = getAudioFiles().length;
    final totalSize = _mediaBox.values.fold<int>(
      0, (sum, file) => sum + file.size);
    final totalDuration = _mediaBox.values.fold<Duration>(
      Duration.zero, (sum, file) => sum + file.duration);
    final totalPlayCount = _mediaBox.values.fold<int>(
      0, (sum, file) => sum + file.playCount);
    
    return {
      'totalFiles': _mediaBox.length,
      'totalVideos': totalVideos,
      'totalAudio': totalAudio,
      'totalSize': totalSize,
      'totalDuration': totalDuration,
      'totalPlayCount': totalPlayCount,
      'favorites': getFavorites().length,
      'playlists': _playlistBox.length,
    };
  }
}