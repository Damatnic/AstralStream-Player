// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        // Core versions
        kotlin_version = '2.0.10'
        agp_version = '8.2.2'
        
        // Jetpack Compose
        compose_bom_version = '2024.02.00'
        compose_compiler_version = '1.5.15'
        compose_activity_version = '1.9.2'
        
        // AndroidX
        core_ktx_version = '1.13.1'
        lifecycle_version = '2.8.6'
        nav_version = '2.8.0'
        room_version = '2.6.1'
        work_version = '2.9.1'
        datastore_version = '1.1.1'
        biometric_version = '1.2.0-alpha05'
        fragment_version = '1.8.3'
        
        // Media & Player
        media3_version = '1.4.1'
        
        // Compose
        compose_version = '1.6.0'
        
        // Dependency Injection
        hilt_version = '2.51.1'
        hilt_navigation_compose_version = '1.2.0'
        
        // Networking
        retrofit_version = '2.11.0'
        okhttp_version = '4.12.0'
        
        // Image Loading
        glide_version = '4.16.0'
        coil_version = '2.7.0'
        
        // Async
        coroutines_version = '1.8.1'
        
        // ML & AI
        mlkit_text_recognition_version = '16.0.1'
        mlkit_language_id_version = '17.0.6'
        mlkit_translate_version = '17.0.3'
        mlkit_face_detection_version = '16.1.7'
        mlkit_object_detection_version = '17.0.2'
        tensorflow_lite_version = '2.16.1'
        tensorflow_lite_support_version = '0.4.4'
        tensorflow_lite_gpu_version = '2.16.1'
        
        // Accompanist
        accompanist_version = '0.34.0'
        
        // Testing
        junit_version = '4.13.2'
        mockito_version = '5.14.0'
        androidx_test_ext_version = '1.2.1'
        espresso_version = '3.6.1'
        arch_testing_version = '2.2.0'
        mockk_version = '1.13.12'
        robolectric_version = '4.13'
        turbine_version = '1.1.0'
        
        // Firebase (for crash reporting)
        firebase_bom_version = '33.3.0'
        
        // Build optimization
        compile_sdk = 34
        min_sdk = 23
        target_sdk = 34
        
        // Performance & Monitoring
        leakcanary_version = '2.14'
        
        // Code Quality
        detekt_version = '1.23.6'
        ktlint_version = '12.1.1'
    }
}

plugins {
    id 'com.android.application' version '8.11.1' apply false
    id 'com.android.library' version '8.11.1' apply false
    id 'org.jetbrains.kotlin.android' version '2.0.10' apply false
    id 'org.jetbrains.kotlin.plugin.compose' version '2.0.10' apply false
    id 'org.jetbrains.kotlin.plugin.parcelize' version '2.0.10' apply false
    id 'com.google.dagger.hilt.android' version '2.51.1' apply false
    id 'androidx.navigation.safeargs.kotlin' version '2.8.0' apply false
    id 'com.google.gms.google-services' version '4.4.2' apply false
    id 'com.google.firebase.crashlytics' version '3.0.2' apply false
    id 'androidx.benchmark' version '1.3.0' apply false
    id 'org.gradle.android.cache-fix' version '3.0.1' apply false
    id 'io.gitlab.arturbosch.detekt' version '1.23.6' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '12.1.1' apply false
    id 'com.github.ben-manes.versions' version '0.51.0' apply false
    id 'com.google.devtools.ksp' version '2.0.10-1.0.24' apply false
}

allprojects {
    // Global compile options
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = '11'
            freeCompilerArgs += [
                "-opt-in=kotlin.RequiresOptIn",
                "-opt-in=kotlin.ExperimentalStdlibApi",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-opt-in=androidx.media3.common.util.UnstableApi"
            ]
        }
    }
}

// Global gradle configuration for build optimization
subprojects {
    apply plugin: 'org.gradle.android.cache-fix'
    
    afterEvaluate {
        if (hasProperty('android')) {
            android {
                compileSdk compile_sdk
                
                defaultConfig {
                    minSdk min_sdk
                    targetSdk target_sdk
                }
                
                compileOptions {
                    sourceCompatibility = JavaVersion.VERSION_11
                    targetCompatibility = JavaVersion.VERSION_11
                    
                    // Enable incremental annotation processing
                    incremental = true
                }
                
                testOptions {
                    unitTests {
                        includeAndroidResources = true
                        returnDefaultValues = true
                    }
                    
                    animationsDisabled = true
                }
                
                packagingOptions {
                    resources {
                        excludes += [
                            '/META-INF/{AL2.0,LGPL2.1}',
                            '/META-INF/DEPENDENCIES',
                            '/META-INF/LICENSE',
                            '/META-INF/LICENSE.txt',
                            '/META-INF/NOTICE',
                            '/META-INF/NOTICE.txt'
                        ]
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Version catalog for dependency management
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}
